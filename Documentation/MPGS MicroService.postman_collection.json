{
	"info": {
		"_postman_id": "461a4458-192f-4556-8974-1909654f21a3",
		"name": "MPGS MicroService",
		"description": "# Collection of Gateway Operations\n\nThis Postman collection allows you to test various requests related to managing your online payment transactions in the gateway.\n\n## When using the collection:\n- If the requests within a folder have a number in front of them, they are part of a flow. Tests are used to store values from responses as variables, and those variables are consequently used in follow-up requests. This means that those requests must be run in the provided order to ensure successful responses.\n- The Payment Methods folder contains examples of requests using specific payment methods. All requests in all other folders use a credit card as a payment method.\n\n## Prerequisites:\nIn order for these demonstrations to work, you'll have to define the following Postman variables in the Environment file:\n\n**Local variables -**\n- \\{\\{host\\}\\} - The gateway host (without the https:// prefix), e.g. payment.gateway.com\n- \\{\\{merchantId\\}\\} - The merchant ID to use.\n- \\{\\{apiPassword\\}\\} - The merchant's API password.\n- \\{\\{currency\\}\\} - Currency.\n- \\{\\{authorizationCode\\}\\} - Value generated by the issuing bank in response to a proposal to transfer funds. This variable is needed for REFERRAL and standalone CAPTURE requests.\n- \\{\\{appleToken\\}\\} - ApplePay token, required for ApplePay mobile wallets requests. This token is always provided by the merchant and is generated by the merchant's system.\n- \\{\\{googleToken\\}\\} - GooglePay token, required for GooglePay mobile wallets requests. This token is always provided by the merchant and is generated by the merchant's system.\n\nPCI sensitive information\n- \\{\\{fpan\\}\\} - Financial PAN of the credit or debit card.\n- \\{\\{expMonth\\}\\} - Card Expiry Month for the main fpan.\n- \\{\\{expYear\\}\\} - Card Expiry Year for the main fpan.\n- \\{\\{securityCode\\}\\} - Card Security Code for the main fpan.\n- \\{\\{fpanAdditional\\}\\} - Financial PAN of the credit or debit card. The variable is specific for Challenge Flow, Pay with Risk Reject, Search Tokens requests.\n- \\{\\{expMonthAdditional\\}\\} - Card Expiry Month for fpanAdditional.\n- \\{\\{expYearAdditional\\}\\} - Card Expiry Year for fpanAdditional..\n- \\{\\{securityCodeAdditional\\}\\} - Card Security Code for fpanAdditional\n- \\{\\{costcoGiftCardNumber\\}\\} - Costco gift card number, required for Balance Inquiry requests.\n- \\{\\{costcoCardPin\\}\\} - Costco gift card pin.\n- \\{\\{giftCardNumber\\}\\} - Gift card number. Required for requests with the gift card payment method.\n\n**Autogenerated Variables - those variables will be set automatically by the pre-request script:** \n- \\{\\{cardPrefix\\}\\} - The first 10 digits of the card number, as printed on the card. It is automatically truncated from fpanMain. Required for Payment Options Inquiry.\n- \\{\\{orderId\\}\\} - A unique identifier for this order to distinguish it from any other order you create.\n- \\{\\{nextPage\\}\\} - An Auto generated variable required for Search Token requests. It used to navigate through the pages and retrieve the next set of results.\n- \\{\\{agreementId\\}\\} - for the Payment Agreement ID allowing the merchant to store and use payer's payment details for merchant-initiated payments.\n- \\{\\{3DS2acsURL\\}\\} - The URL of the issuer's Access Control Server (ACS). Required for Challenge requests.\n- \\{\\{gatewayRecommendation\\}\\} - Recommendation provided by the gateway on your next actions, based on the 3DS transaction filtering rules configured, taken from AUTH_PAYER request and used in subsequent requests from 3D Secure Authentication requests. \n- \\{\\{tokenId\\}\\} - Token identifier used in requests. Its generation can vary based on merchant configuration. It may either be merchant-supplied, generated via pre-request scripts, or system-generated.\n- \\{\\{threeDSMethodPostData\\}\\} - ThreeDS Method Data from INITIATE AUTHENTICATION response and used in subsequent requests from 3D Secure Authentication flows.\n- \\{\\{sessionId\\}\\} - Session identifier\n- \\{\\{transactionId\\}\\} - Unique identifier for this transaction to distinguish it from any other transaction on the order.\n- \\{\\{creqMessage\\}\\} - The Base64 URL encoded CReq message to be used for the Challenge flow.\n**General Notes:**\n- The example requests in the collection are divided into multiple folders. To make it easy to find the request you need, the main folder levels of the collection follow the structure of the documentation library.\n- Pre-request scripts are used to generate unique order IDs for all initial transactions.\n- Please exercise caution when working with sensitive information. Be vigilant about protecting API keys.\n- Avoid Saving Sensitive Information on the Postman Cloud: Do not save any sensitive information, i.e. keys, directly on the Postman cloud. Storing such information in public or shared spaces poses a security risk and may lead to unauthorized access.\n- Consider using the Postman application locally on your machine. A local instance like lightweight Postman API client can provide more control over your data, reducing the risk of unintentional exposure.\n- Please follow Postmanâ€™s guidelines for using API keys on their platform\n  - Please use **[Current value (local)](https://learning.postman.com/docs/sending-requests/environments/managing-environments/)** in Environment variables. As environment variable's current value is used in your local instance of Postman and isn't synced to your Postman account.\n  - Please use **[Variable Types](https://blog.postman.com/introducing-secret-variable-type-in-postman/)** as **Secret** instead of **Default**. The secret variable type will enable masking of the initial and current values.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16194081",
		"_collection_link": "https://solar-equinox-778250.postman.co/workspace/MojoPay-CardPayments~fa401b33-a508-48ef-a9cc-dd9ce5f4a1ff/collection/16194081-461a4458-192f-4556-8974-1909654f21a3?action=share&source=collection_link&creator=16194081"
	},
	"item": [
		{
			"name": "Hosted Checkout",
			"item": [
				{
					"name": "Initial Transactions",
					"item": [
						{
							"name": "INITIATE CHECKOUT for PURCHASE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\") \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AMOUNT\": \"250.00\",\r\n  \"CURRENCY\": \"GHS\",\r\n  \"ORDERID\": \"426614124001\",\r\n  \"RETURNURL\": \"https://webhook.site/63a4b1d6-75f6-496c-a659-883de14c3bff\",\r\n  \"APIOPERATION\": \"INITIATE_CHECKOUT\",\r\n  \"MERCHANT\": {\r\n    \"NAME\": \"YOUR MERCHANT NAME\",\r\n    \"ADDRESS\": {\r\n      \"LINE1\": \"123 STREET\",\r\n      \"LINE2\": \"CITY, COUNTRY\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7167/api/payment/create-session",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7167",
									"path": [
										"api",
										"payment",
										"create-session"
									]
								}
							},
							"response": [
								{
									"name": "Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"amount\": \"250.00\",\r\n  \"currency\": \"GHS\",\r\n  \"orderId\": \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"returnUrl\": \"https://dev.cspay.app/ZenithPayment/CreatePayment\",\r\n  \"apiOperation\": \"PURCHASE\",\r\n  \"merchant\": {\r\n    \"name\": \"Test merchant2\",\r\n    \"address\": {\r\n      \"line1\": \"123 Street\",\r\n      \"line2\": \"City, Country\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:7167/api/payment/create-session",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "7167",
											"path": [
												"api",
												"payment",
												"create-session"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Tue, 22 Apr 2025 12:00:17 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"resp\": {\n        \"statusCode\": 400,\n        \"data\": \"{\\\"error\\\":{\\\"cause\\\":\\\"INVALID_REQUEST\\\",\\\"explanation\\\":\\\"Unexpected parameter 'Interaction.Merchant.Name'\\\"},\\\"result\\\":\\\"ERROR\\\"}\",\n        \"status\": 0,\n        \"message\": null\n    }\n}"
								}
							]
						},
						{
							"name": "INITIATE CHECKOUT for VERIFY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\") \r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"VERIFY\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://localhost:7167/api/Payment/verifyV2/order/{{orderid}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7167",
									"path": [
										"api",
										"Payment",
										"verifyV2",
										"order",
										"{{orderid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Contains Hosted Checkout example requests for:\n\n- Initial transactions for PAY, AUTHORIZE, and VERIFY\n    \n- Authorize and Capture flow"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orderid",
			"value": "db271c31-932f-4b83-a0be-ad51ca98cc00",
			"type": "string"
		}
	]
}